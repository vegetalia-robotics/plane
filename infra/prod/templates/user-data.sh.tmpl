#cloud-config
package_update: true
runcmd:
  - |
    #!/bin/bash -xe
    export DEBIAN_FRONTEND=noninteractive
    apt-get update
    apt-get install -y docker.io docker-compose-plugin git awscli snapd
    usermod -aG docker ubuntu
    # ensure ssm agent installed and running
    snap install amazon-ssm-agent --classic || true
    systemctl enable snap.amazon-ssm-agent.amazon-ssm-agent || true
    systemctl start snap.amazon-ssm-agent.amazon-ssm-agent || true

    # data volume mount
    DEVICE=""
    if [ -e /dev/nvme1n1 ]; then DEVICE="/dev/nvme1n1"; fi
    if [ -z "$DEVICE" ] && [ -e /dev/xvdf ]; then DEVICE="/dev/xvdf"; fi
    if [ -z "$DEVICE" ] && [ -e /dev/sdf ]; then DEVICE="/dev/sdf"; fi
    if [ -n "$DEVICE" ]; then
      if ! blkid $DEVICE; then mkfs.ext4 -F $DEVICE; fi
      mkdir -p /data && echo "$DEVICE /data ext4 defaults,nofail 0 2" >> /etc/fstab && mount -a
      mkdir -p /data/pg /data/redis
      chown -R ubuntu:ubuntu /data
    fi

    mkdir -p /opt/plane && chown -R ubuntu:ubuntu /opt/plane
    cat >/opt/plane/.env <<'EOF'
PLANE_SECRET_KEY=${plane_secret}
AWS_REGION=${region}
S3_BUCKET=${uploads_bucket}
POSTGRES_DB=plane
POSTGRES_USER=plane
POSTGRES_PASSWORD=${postgres_pass}
DATABASE_URL=postgresql://plane:${postgres_pass}@postgres:5432/plane
REDIS_PASSWORD=${redis_pass}
REDIS_URL=redis://:${redis_pass}@redis:6379/0
EOF

    cat >/opt/plane/docker-compose.yml <<'EOFY'
version: "3.9"
services:
  postgres:
    image: postgres:16
    restart: unless-stopped
    environment:
      - POSTGRES_DB=plane
      - POSTGRES_USER=plane
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    env_file: [".env"]
    volumes:
      - /data/pg:/var/lib/postgresql/data
  redis:
    image: redis:7
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    env_file: [".env"]
    volumes:
      - /data/redis:/data
EOFY

    cat >/opt/plane/docker-compose.prod.yml <<'EOFZ'
version: "3.9"
services:
  backend:
    image: ${ECR_BACKEND:-<replace>}:latest
    restart: unless-stopped
    env_file: [".env"]
    depends_on: { postgres: { condition: service_started }, redis: { condition: service_started } }
  frontend:
    image: ${ECR_FRONTEND:-<replace>}:latest
    restart: unless-stopped
    env_file: [".env"]
    depends_on: ["backend"]
  caddy:
    image: caddy:2
    restart: unless-stopped
    ports: ["80:80","443:443"]
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on: ["frontend","backend"]
volumes:
  caddy_data: {}
  caddy_config: {}
EOFZ

    cat >/opt/plane/Caddyfile <<'EOFC'
:80 {
  encode gzip
  header -Server
  @api path /api* /admin* /graphql*
  handle @api { reverse_proxy backend:8000 }
  handle { reverse_proxy frontend:3000 }
}
EOFC

    cat >/etc/systemd/system/plane-compose.service <<'EOFS'
[Unit]
Description=Plane Compose
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=/opt/plane
ExecStart=/usr/bin/docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
ExecStop=/usr/bin/docker compose -f docker-compose.yml -f docker-compose.prod.yml down

[Install]
WantedBy=multi-user.target
EOFS
    systemctl daemon-reload && systemctl enable plane-compose && systemctl start plane-compose
